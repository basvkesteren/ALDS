/*
    ALDS (ARM LPC Driver Set)

    openocd_config:
                   Configuration for OpenOCD

    copyright:
              Copyright (c) 2006-2008 Bastiaan van Kesteren <bastiaanvankesteren@gmail.com>

              This program comes with ABSOLUTELY NO WARRANTY; for details see the file LICENSE.
              This program is free software; you can redistribute it and/or modify it under the terms
              of the GNU General Public License as published by the Free Software Foundation; either
              version 2 of the License, or (at your option) any later version.

    remarks:
            -This file has to be preprocessed first before passed on to OpenOCD. See the Makefile for
             details

*/
#include <config.h>

/* daemon configuration */
telnet_port 4444
gdb_port 3333

/* interface */
#if __JTAG_INTERFACE == 0
/* Wiggler */
interface parport
parport_port 0
parport_cable wiggler
jtag_speed 0
#elif __JTAG_INTERFACE == 1
/* Olimex USB-OCD */
interface ft2232
ft2232_layout olimex-jtag
ft2232_vid_pid 0x15BA 0x0003
ft2232_device_desc "Olimex OpenOCD JTAG"
jtag_speed 3
#else
/* Unknown interface type... */
#error "Unknown or unsupported JTAG interface selected"
#endif


if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME __MCU
}

if { [info exists ENDIAN] } {
   set  _ENDIAN $ENDIAN
} else {
   set  _ENDIAN little
}

if { [info exists CPUTAPID ] } {
   set _CPUTAPID $CPUTAPID
} else {
    /* Force an error till we get a good number */
    set _CPUTAPID 0xffffffff
}

/*delays on reset lines */
jtag_nsrst_delay 200
jtag_ntrst_delay 200

/* NOTE!!! LPCs need reset pulled while RTCK is low. 0 to activate
   JTAG, power-on reset is not enough, i.e. you need to perform a
   reset before being able to talk to the LPC2148, attach is not
   possible. */

/* Use combined on interfaces or targets that can't set TRST/SRST separately */
reset_config trst_and_srst srst_pulls_trst

/* jtag scan chain */
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
#if defined __LOADFLASH || defined __RUN_FROM_RAM
$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x4000 -work-area-backup 0
#else
$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x00000000 -work-area-size 0x4000 -work-area-backup 0
#endif

$_TARGETNAME configure -event reset-init {
    /* Force target into ARM state */
    soft_reset_halt
    /* do not remap 0x0000-0x0020 to anything but the flash */
    mwb 0xE01FC040 0x01
}

#if __MCU_FLASHTYPE == 2
flash bank lpc2000 0x0 0x7d000 0 0 0 lpc2000_v2 __FOSC calc_checksum
#elif __MCU_FLASHTYPE == 1
flash bank lpc2000 0x0 0x7d000 0 0 0 lpc2000_v1 __FOSC calc_checksum
#else
/* Woops.. Dunno how to handle this MCU.. check drivers/mcu_select.h for the flash variant detection */
#error "Don't know the flash variant! Unknown or unsupported MCU?"
#endif
